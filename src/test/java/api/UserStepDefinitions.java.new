package api;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.When;
import io.cucumber.java.en.Then;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.http.ContentType;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import static io.restassured.RestAssured.*;

public class UserStepDefinitions {
    private Response response;
    private final String BASE_URL = "https://dummyapi.io/data/v1";
    private final String APP_ID = "65a4d18c66fca579a2a26919";
    private String userId;

    static {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
    }

    @Given("user API is available")
    public void userApiIsAvailable() {
        response = given()
            .header("app-id", APP_ID)
            .get(BASE_URL + "/test-ping");
        Assertions.assertEquals(200, response.getStatusCode());
    }

    @When("I request user with id {string}")
    public void iRequestUserWithId(String userId) {
        response = given()
            .header("app-id", APP_ID)
            .get(BASE_URL + "/user/" + userId);
    }

    @When("I create a new user with name {string} and email {string}")
    public void iCreateNewUser(String name, String email) {
        String requestBody = String.format("""
            {
                "firstName": "%s",
                "lastName": "Doe",
                "email": "%s",
                "title": "mr",
                "picture": "https://randomuser.me/api/portraits/men/1.jpg"
            }""", name, email);
        
        response = given()
            .header("app-id", APP_ID)
            .contentType(ContentType.JSON)
            .body(requestBody)
            .post(BASE_URL + "/user/create");
        
        // Store the created user ID if successful
        if (response.getStatusCode() == 200 || response.getStatusCode() == 201) {
            userId = response.jsonPath().getString("id");
        }
    }

    @When("I update user with id {string} to name {string}")
    public void iUpdateUser(String userId, String newName) {
        response = given()
            .header("app-id", APP_ID)
            .contentType(ContentType.JSON)
            .body("{\"firstName\": \"" + newName + "\"}")
            .put(BASE_URL + "/user/" + userId);
    }

    @When("I delete user with id {string}")
    public void iDeleteUser(String userId) {
        response = given()
            .header("app-id", APP_ID)
            .delete(BASE_URL + "/user/" + userId);
    }

    @Then("the response status should be {int}")
    public void theResponseStatusShouldBe(int statusCode) {
        System.out.println("Actual response status code: " + response.getStatusCode());
        System.out.println("Response body: " + response.getBody().asString());
        Assertions.assertEquals(statusCode, response.getStatusCode());
    }

    @Then("the response should contain user data")
    public void theResponseShouldContainUserData() {
        String responseBody = response.getBody().asString();
        Assertions.assertTrue(responseBody.contains("id"));
        Assertions.assertTrue(responseBody.contains("firstName"));
    }

    @Then("the response should contain created user data")
    public void theResponseShouldContainCreatedUserData() {
        String responseBody = response.getBody().asString();
        Assertions.assertTrue(responseBody.contains("id"));
        Assertions.assertTrue(responseBody.contains("firstName"));
    }

    @Then("the response should contain updated user data")
    public void theResponseShouldContainUpdatedUserData() {
        String responseBody = response.getBody().asString();
        Assertions.assertTrue(responseBody.contains("id"));
        Assertions.assertTrue(responseBody.contains("firstName"));
    }

    @Then("the response should confirm user deletion")
    public void theResponseShouldConfirmUserDeletion() {
        String responseBody = response.getBody().asString().toLowerCase();
        Assertions.assertTrue(responseBody.contains("id") || responseBody.contains("deleted"));
    }

    @Then("the response should contain error message")
    public void theResponseShouldContainErrorMessage() {
        String responseBody = response.getBody().asString().toLowerCase();
        Assertions.assertTrue(responseBody.contains("error") || responseBody.contains("message"));
    }

    @When("I request all users")
    public void iRequestAllUsers() {
        response = given()
            .header("app-id", APP_ID)
            .get(BASE_URL + "/user");
    }

    @When("I request all users without app-id")
    public void iRequestAllUsersWithoutAppId() {
        response = get(BASE_URL + "/user");
    }

    @Then("the response should contain list of users")
    public void theResponseShouldContainListOfUsers() {
        String responseBody = response.getBody().asString();
        Assertions.assertTrue(responseBody.contains("data"));
        Assertions.assertTrue(responseBody.contains("total"));
    }
}
